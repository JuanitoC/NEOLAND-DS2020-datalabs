# 7 años es el valor que más se repite con una frecuencia de 141
moda <- table(nba$Tiempo)
moda[which.max(moda)]
rm(moda)
## Creo dos Dataframes, uno con CM y otro con pies posteriormente hago un calculo para comprobar que todas las líneas están incluidas.
DF_CM <- filter(nba,str_detect(Height,"-")==FALSE) %>%
mutate(Height=str_replace(Height,"cm", ""))
## En esta operación selecciono las filas con altura en sistema imperial (SI), separo la variable altura en 2, pies y pulgadas y procedo a calcular la altura en sistema metrico, posteriormente elimino las columnas pies y pulgadas
DF_FT <- filter(nba,str_detect(Height,"-")==TRUE) %>%
separate(Height,c("Ft","Inc"),sep = "-") %>%
mutate( Height = round(as.numeric(Ft)*30.34 + as.numeric(Inc)*2.54,0)
) %>% select(-Ft,-Inc)
str(DF_FT)
## Compruebo que todas las líneas estén incluidas
nrow(nba) - nrow(DF_CM) - nrow(DF_FT)
## Uno los dos dataframes.
nba <-rbind(DF_CM,DF_FT)
nba['Height'] <-as.numeric(nba$Height)
rm(DF_CM,DF_FT)
## En este ejercicio voy a operar de una manera muy parecida al caso anterior
DF_KG <- filter(nba,str_detect(Weight,"kg")==TRUE) %>%
mutate(Weight=str_replace(Weight,"kg", ""),
Weight=round(as.numeric(Weight) * 2.20,0)
)
## En esta operación selecciono las filas con altura en sistema imperial (SI), separo la variable altura en 2, pies y pulgadas y procedo a calcular la altura en sistema metrico, posteriormente elimino las columnas pies y pulgadas
DF_LB <- filter(nba,str_detect(Weight,"kg")==FALSE)
## Compruebo que todas las líneas estén incluidas
nrow(nba) - nrow(DF_KG) - nrow(DF_LB)
## Uno los dos dataframes.
nba <-rbind(DF_KG,DF_LB)
nba['Weight'] <-as.numeric(nba$Weight)
rm(DF_KG,DF_LB)
nba$Position[nba$Position =='F' || nba$Position =='F-C' || nba$Position =='FC' ] = 'Forward'
nba$Position[nba$Position =='G' || nba$Position =='G-F' || nba$Position =='GF' ] = 'Guard'
nba$Position[nba$Position =='PG' ] = 'Point Guard'
nba$Position[nba$Position =='SG' ] = 'Shooting Guard'
nba$Position[nba$Position =='SF' ] = 'Small Forward'
nba$Position[nba$Position =='PF' ] = 'Power Forward'
nba$Position[nba$Position =='C' ] = 'Center'
unique(nba$Position)
PositionMVP <- table(nba$Position)
PositionMVP[which.max(PositionMVP)]
length(unique(nba$Team))
TeamMVP <- data.frame(table(nba['Team']))
TeamMVP <- TeamMVP[order(TeamMVP$Freq,decreasing = TRUE),]
TeamMVP[1:5,]
rm(TeamMVP)
Players <- select(nba,Player,Draft.Year,Height,Position,Weight) %>% distinct()
Top10shortplayers <- Players[order(Players$Height,decreasing = FALSE),]
Top10shortplayers[1:10,]
rm(Top10shortplayers)
Top10tallplayers <- Players[order(Players$Height,decreasing = TRUE),]
Top10tallplayers[1:10,]
rm(Top10tallplayers)
## Mediante un histograma veo que los datos excepcionales son <150 y >272
hist(nba$Weight)
table(nba$Weight)
nba.avg = filter(nba,Weight>150 & Weight<272 ) %>% select(Weight)
nba.unique <-  select(nba,Weight)
ggplot(nba.avg,aes(y=Weight))+geom_boxplot() + ylim(150,500)
ggplot(nba.unique,aes(y=Weight))+geom_boxplot() + ylim(150,500)
rm(nba.avg,nba.unique)
# Con la eliminación de los outliers con índice a 150 y 272, con los pesos respetivos 300 y 500, se han reducido el numero de elementos en el segundo dataframe nba.avg. Los elementos se han reducido de 274 a 272
# Además con el summary se pueden observar los siguientes cambios:
#- Valor Max de 400 a 211,680
#- el 1st cuartil de 73,316 a 72,765
#- la mediana de 102,532 a 101,430
#- la media de 106,466 a 104,675
#- el 3er cuartil y el min han quedado invariados
Players['Altura']= 'normal'
Players <- Players[order(Players$Height,decreasing=TRUE),]
Players[1:50,'Altura'] = 'alto'
Players <- Players[order(Players$Height,decreasing=FALSE),]
Players[1:50,'Altura'] = 'bajo'
table(Players$Altura)
Players['Peso']= 'normal'
Players <- Players[order(Players$Weight,decreasing=TRUE),]
Players[1:50,'Peso'] = 'alto'
Players <- Players[order(Players$Weight,decreasing=FALSE),]
Players[1:50,'Peso'] = 'bajo'
table(Players$Peso)
PlayersStats <- Players %>% select(Peso,Weight)
PlayersStats <- PlayersStats %>%group_by(Peso)  %>% summarise(media = round(mean(Weight),2), std=round(sd(Weight),2))
print(PlayersStats)
rm(PlayersStats)
str(Players$Altura)
Players$Altura <- ordered(Players$Altura,
levels= c("1","2","3"),
labels =c("bajo","normal","alto")
)
str(Players$Altura)
Players$Altura <- ordered(Players$Altura,
levels= c("bajo","normal","alto"),
ordered = TRUE
)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(stringr)
library(tidyverse)
nba<-read.csv("NBA_player_of_the_week.csv",header = TRUE)
nba0 <-nba
class(nba)
str(nba)
head(nba,6)
ls(nba)
names(nba)
row.names(nba)
levels(nba$Conference)
table(nba$Conference)
conf<-unique(nba$Conference)
conf
conf = select(nba, Conference,Team) %>% filter(Conference!='') %>% distinct() ## Damos por hecho que los equipos siempre han estado en la misma conferencia, así que creamos un dataframe con conferencia y equipo, eliminamos los valores en blanco y después los duplicados para tener los datos sólo una vez
i=1
for (i in c(1:nrow(conf))){
nba <- mutate(nba,Conference= if_else(Conference=='' & Team==conf[i,2]
,conf[i,1]
,Conference)
)
}
## Comprobamos que todo ha hay un 0.7% de Equipos sin conferencia
round(table(nba$Conference)/length(nba$Conference)*100,1)
rm(conf,i)
##• Hago una busqueda para comprobar los equipos sin conferencia, el equipo son los washington bullets.
select(nba, Conference,Team) %>% filter(Conference=='') %>% distinct()
## Para saber a que asignarlo busco otros posibles equipos de washington
select(nba, Conference,Team) %>% filter(str_detect(Team,"Washington")) %>% distinct()
## encuentro que hay otro equipo de Washington y que corresponde a la conferencia este
nba <- mutate(nba,Conference= if_else(Conference==''
,'East'
,Conference
)
)
## Revisamos que todos los equipos tengan la conferencia asignada
round(table(nba$Conference)/length(nba$Conference)*100,1)
nba$Conference <- as.factor(nba$Conference)
str(nba['Conference'])
## Movido a la parte final
Vartofact <- c('Height' , 'Player' , 'Position' , 'Season' , 'Team' , 'Weight')
### Reviso los valores NA y agrupo, para las 6 columnas obtengo False 1145, por lo que no hay NA
for (x in Vartofact){
print(x)
print(table(is.na(nba[,x])))
}
### Reviso los valores null y agrupo, para las 6 columnas obtengo False 1, por lo que no hay null
for (x in Vartofact){
print(x)
print(table(is.null(nba[,x])))
}
rm(x, Vartofact)
### Reviso que no haya NANs, obtengo un total de 0 así que no hay ninguno, prosigo
print(sum(apply(nba,2,is.nan)))
nba['Tiempo'] <- nba['Season.short']-nba['Draft.Year']
# 7 años es el valor que más se repite con una frecuencia de 141
moda <- table(nba$Tiempo)
moda[which.max(moda)]
rm(moda)
## Creo dos Dataframes, uno con CM y otro con pies posteriormente hago un calculo para comprobar que todas las líneas están incluidas.
DF_CM <- filter(nba,str_detect(Height,"-")==FALSE) %>%
mutate(Height=str_replace(Height,"cm", ""))
## En esta operación selecciono las filas con altura en sistema imperial (SI), separo la variable altura en 2, pies y pulgadas y procedo a calcular la altura en sistema metrico, posteriormente elimino las columnas pies y pulgadas
DF_FT <- filter(nba,str_detect(Height,"-")==TRUE) %>%
separate(Height,c("Ft","Inc"),sep = "-") %>%
mutate( Height = round(as.numeric(Ft)*30.34 + as.numeric(Inc)*2.54,0)
) %>% select(-Ft,-Inc)
str(DF_FT)
## Compruebo que todas las líneas estén incluidas
nrow(nba) - nrow(DF_CM) - nrow(DF_FT)
## Uno los dos dataframes.
nba <-rbind(DF_CM,DF_FT)
nba['Height'] <-as.numeric(nba$Height)
rm(DF_CM,DF_FT)
## En este ejercicio voy a operar de una manera muy parecida al caso anterior
DF_KG <- filter(nba,str_detect(Weight,"kg")==TRUE) %>%
mutate(Weight=str_replace(Weight,"kg", ""),
Weight=round(as.numeric(Weight) * 2.20,0)
)
## En esta operación selecciono las filas con altura en sistema imperial (SI), separo la variable altura en 2, pies y pulgadas y procedo a calcular la altura en sistema metrico, posteriormente elimino las columnas pies y pulgadas
DF_LB <- filter(nba,str_detect(Weight,"kg")==FALSE)
## Compruebo que todas las líneas estén incluidas
nrow(nba) - nrow(DF_KG) - nrow(DF_LB)
## Uno los dos dataframes.
nba <-rbind(DF_KG,DF_LB)
nba['Weight'] <-as.numeric(nba$Weight)
rm(DF_KG,DF_LB)
nba$Position[nba$Position =='F' || nba$Position =='F-C' || nba$Position =='FC' ] = 'Forward'
nba$Position[nba$Position =='G' || nba$Position =='G-F' || nba$Position =='GF' ] = 'Guard'
nba$Position[nba$Position =='PG' ] = 'Point Guard'
nba$Position[nba$Position =='SG' ] = 'Shooting Guard'
nba$Position[nba$Position =='SF' ] = 'Small Forward'
nba$Position[nba$Position =='PF' ] = 'Power Forward'
nba$Position[nba$Position =='C' ] = 'Center'
unique(nba$Position)
PositionMVP <- table(nba$Position)
PositionMVP[which.max(PositionMVP)]
length(unique(nba$Team))
TeamMVP <- data.frame(table(nba['Team']))
TeamMVP <- TeamMVP[order(TeamMVP$Freq,decreasing = TRUE),]
TeamMVP[1:5,]
rm(TeamMVP)
Players <- select(nba,Player,Draft.Year,Height,Position,Weight) %>% distinct()
Top10shortplayers <- Players[order(Players$Height,decreasing = FALSE),]
Top10shortplayers[1:10,]
rm(Top10shortplayers)
Top10tallplayers <- Players[order(Players$Height,decreasing = TRUE),]
Top10tallplayers[1:10,]
rm(Top10tallplayers)
## Mediante un histograma veo que los datos excepcionales son <150 y >272
hist(nba$Weight)
table(nba$Weight)
nba.avg = filter(nba,Weight>150 & Weight<272 ) %>% select(Weight)
nba.unique <-  select(nba,Weight)
ggplot(nba.avg,aes(y=Weight))+geom_boxplot() + ylim(150,500)
ggplot(nba.unique,aes(y=Weight))+geom_boxplot() + ylim(150,500)
rm(nba.avg,nba.unique)
# Con la eliminación de los outliers con índice a 150 y 272, con los pesos respetivos 300 y 500, se han reducido el numero de elementos en el segundo dataframe nba.avg. Los elementos se han reducido de 274 a 272
# Además con el summary se pueden observar los siguientes cambios:
#- Valor Max de 400 a 211,680
#- el 1st cuartil de 73,316 a 72,765
#- la mediana de 102,532 a 101,430
#- la media de 106,466 a 104,675
#- el 3er cuartil y el min han quedado invariados
Players['Altura']= 'normal'
Players <- Players[order(Players$Height,decreasing=TRUE),]
Players[1:50,'Altura'] = 'alto'
Players <- Players[order(Players$Height,decreasing=FALSE),]
Players[1:50,'Altura'] = 'bajo'
table(Players$Altura)
Players['Peso']= 'normal'
Players <- Players[order(Players$Weight,decreasing=TRUE),]
Players[1:50,'Peso'] = 'alto'
Players <- Players[order(Players$Weight,decreasing=FALSE),]
Players[1:50,'Peso'] = 'bajo'
table(Players$Peso)
PlayersStats <- Players %>% select(Peso,Weight)
PlayersStats <- PlayersStats %>%group_by(Peso)  %>% summarise(media = round(mean(Weight),2), std=round(sd(Weight),2))
print(PlayersStats)
rm(PlayersStats)
Players$Altura <- factor(Players$Altura,
levels= c("bajo","normal","alto"),
ordered = TRUE
)
ggplot(Players,aes(y=Weight,x=Peso)) +geom_boxplot()
str(Players$Altura)
factor_laboral
install.packages(car)
install.packages("car")
install.packages("nortest")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(stringr)
library(tidyverse)
nba<-read.csv("NBA_player_of_the_week.csv",header = TRUE)
nba0 <-nba
class(nba)
str(nba)
head(nba,6)
ls(nba)
names(nba)
row.names(nba)
levels(nba$Conference)
table(nba$Conference)
conf<-unique(nba$Conference)
conf
conf = select(nba, Conference,Team) %>% filter(Conference!='') %>% distinct() ## Damos por hecho que los equipos siempre han estado en la misma conferencia, así que creamos un dataframe con conferencia y equipo, eliminamos los valores en blanco y después los duplicados para tener los datos sólo una vez
i=1
for (i in c(1:nrow(conf))){
nba <- mutate(nba,Conference= if_else(Conference=='' & Team==conf[i,2]
,conf[i,1]
,Conference)
)
}
## Comprobamos que todo ha hay un 0.7% de Equipos sin conferencia
round(table(nba$Conference)/length(nba$Conference)*100,1)
rm(conf,i)
##• Hago una busqueda para comprobar los equipos sin conferencia, el equipo son los washington bullets.
select(nba, Conference,Team) %>% filter(Conference=='') %>% distinct()
## Para saber a que asignarlo busco otros posibles equipos de washington
select(nba, Conference,Team) %>% filter(str_detect(Team,"Washington")) %>% distinct()
## encuentro que hay otro equipo de Washington y que corresponde a la conferencia este
nba <- mutate(nba,Conference= if_else(Conference==''
,'East'
,Conference
)
)
## Revisamos que todos los equipos tengan la conferencia asignada
round(table(nba$Conference)/length(nba$Conference)*100,1)
nba$Conference <- as.factor(nba$Conference)
str(nba['Conference'])
## Movido a la parte final
Vartofact <- c('Height' , 'Player' , 'Position' , 'Season' , 'Team' , 'Weight')
### Reviso los valores NA y agrupo, para las 6 columnas obtengo False 1145, por lo que no hay NA
for (x in Vartofact){
print(x)
print(table(is.na(nba[,x])))
}
### Reviso los valores null y agrupo, para las 6 columnas obtengo False 1, por lo que no hay null
for (x in Vartofact){
print(x)
print(table(is.null(nba[,x])))
}
rm(x, Vartofact)
### Reviso que no haya NANs, obtengo un total de 0 así que no hay ninguno, prosigo
print(sum(apply(nba,2,is.nan)))
nba['Tiempo'] <- nba['Season.short']-nba['Draft.Year']
# 7 años es el valor que más se repite con una frecuencia de 141
moda <- table(nba$Tiempo)
moda[which.max(moda)]
rm(moda)
## Creo dos Dataframes, uno con CM y otro con pies posteriormente hago un calculo para comprobar que todas las líneas están incluidas.
DF_CM <- filter(nba,str_detect(Height,"-")==FALSE) %>%
mutate(Height=str_replace(Height,"cm", ""))
## En esta operación selecciono las filas con altura en sistema imperial (SI), separo la variable altura en 2, pies y pulgadas y procedo a calcular la altura en sistema metrico, posteriormente elimino las columnas pies y pulgadas
DF_FT <- filter(nba,str_detect(Height,"-")==TRUE) %>%
separate(Height,c("Ft","Inc"),sep = "-") %>%
mutate( Height = round(as.numeric(Ft)*30.34 + as.numeric(Inc)*2.54,0)
) %>% select(-Ft,-Inc)
str(DF_FT)
## Compruebo que todas las líneas estén incluidas
nrow(nba) - nrow(DF_CM) - nrow(DF_FT)
## Uno los dos dataframes.
nba <-rbind(DF_CM,DF_FT)
nba['Height'] <-as.numeric(nba$Height)
rm(DF_CM,DF_FT)
## En este ejercicio voy a operar de una manera muy parecida al caso anterior
DF_KG <- filter(nba,str_detect(Weight,"kg")==TRUE) %>%
mutate(Weight=str_replace(Weight,"kg", ""),
Weight=round(as.numeric(Weight) * 2.20,0)
)
## En esta operación selecciono las filas con altura en sistema imperial (SI), separo la variable altura en 2, pies y pulgadas y procedo a calcular la altura en sistema metrico, posteriormente elimino las columnas pies y pulgadas
DF_LB <- filter(nba,str_detect(Weight,"kg")==FALSE)
## Compruebo que todas las líneas estén incluidas
nrow(nba) - nrow(DF_KG) - nrow(DF_LB)
## Uno los dos dataframes.
nba <-rbind(DF_KG,DF_LB)
nba['Weight'] <-as.numeric(nba$Weight)
rm(DF_KG,DF_LB)
nba$Position[nba$Position =='F' || nba$Position =='F-C' || nba$Position =='FC' ] = 'Forward'
nba$Position[nba$Position =='G' || nba$Position =='G-F' || nba$Position =='GF' ] = 'Guard'
nba$Position[nba$Position =='PG' ] = 'Point Guard'
nba$Position[nba$Position =='SG' ] = 'Shooting Guard'
nba$Position[nba$Position =='SF' ] = 'Small Forward'
nba$Position[nba$Position =='PF' ] = 'Power Forward'
nba$Position[nba$Position =='C' ] = 'Center'
unique(nba$Position)
PositionMVP <- table(nba$Position)
PositionMVP[which.max(PositionMVP)]
length(unique(nba$Team))
TeamMVP <- data.frame(table(nba['Team']))
TeamMVP <- TeamMVP[order(TeamMVP$Freq,decreasing = TRUE),]
TeamMVP[1:5,]
rm(TeamMVP)
Players <- select(nba,Player,Draft.Year,Height,Position,Weight) %>% distinct()
Top10shortplayers <- Players[order(Players$Height,decreasing = FALSE),]
Top10shortplayers[1:10,]
rm(Top10shortplayers)
Top10tallplayers <- Players[order(Players$Height,decreasing = TRUE),]
Top10tallplayers[1:10,]
rm(Top10tallplayers)
## Mediante un histograma veo que los datos excepcionales son <150 y >272
hist(nba$Weight)
table(nba$Weight)
nba.avg = filter(nba,Weight>150 & Weight<272 ) %>% select(Weight)
nba.unique <-  select(nba,Weight)
ggplot(nba.avg,aes(y=Weight))+geom_boxplot() + ylim(150,500)
ggplot(nba.unique,aes(y=Weight))+geom_boxplot() + ylim(150,500)
rm(nba.avg,nba.unique)
# Con la eliminación de los outliers con índice a 150 y 272, con los pesos respetivos 300 y 500, se han reducido el numero de elementos en el segundo dataframe nba.avg. Los elementos se han reducido de 274 a 272
# Además con el summary se pueden observar los siguientes cambios:
#- Valor Max de 400 a 211,680
#- el 1st cuartil de 73,316 a 72,765
#- la mediana de 102,532 a 101,430
#- la media de 106,466 a 104,675
#- el 3er cuartil y el min han quedado invariados
Players['Altura']= 'normal'
Players <- Players[order(Players$Height,decreasing=TRUE),]
Players[1:50,'Altura'] = 'alto'
Players <- Players[order(Players$Height,decreasing=FALSE),]
Players[1:50,'Altura'] = 'bajo'
table(Players$Altura)
Players['Peso']= 'normal'
Players <- Players[order(Players$Weight,decreasing=TRUE),]
Players[1:50,'Peso'] = 'alto'
Players <- Players[order(Players$Weight,decreasing=FALSE),]
Players[1:50,'Peso'] = 'bajo'
table(Players$Peso)
PlayersStats <- Players %>% select(Peso,Weight)
PlayersStats <- PlayersStats %>%group_by(Peso)  %>% summarise(media = round(mean(Weight),2), std=round(sd(Weight),2))
print(PlayersStats)
rm(PlayersStats)
Players$Altura <- factor(Players$Altura,
levels= c("bajo","normal","alto"),
ordered = TRUE
)
ggplot(Players,aes(y=Weight,x=Peso)) +geom_boxplot()
str(Players$Altura)
AltNormalPesoAltoAlfa <- filter(Players,Peso=='normal'&Altura =='alto')
AltNormalPesoAltoAlfa[order(AltNormalPesoAltoAlfa$Player,decreasing=FALSE),]
print(AltNormalPesoAltoAlfa)
rm(AltNormalPesoAltoAlfa)
Vartofact <- c('Height' , 'Player' , 'Position' , 'Season' , 'Team' , 'Weight')
for (x in Vartofact){
nba[,x] <- as.factor(nba[,x])
str(nba[,x])
}
rm(Vartofact )
# Estudio de workclass: El 5,6% de los valores workclass son ? así que procedo a reemplazarlo
round(table(datosAdult$workclass)/nrow(datosAdult)*100,1)
# Cargamos el juego de datos
datosAdult <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data',stringsAsFactors = FALSE, header = FALSE)
# Nombres de los atributos
names(datosAdult) <- c("age","workclass","fnlwgt","education","education-num","marital-status","occupation","relationship","race","sex","capital-gain","capital-loss","hour-per-week","native-country","income")
library(dplyr)
library(tidyverse)
filas= c(1:nrow(datosAdult)) ## Cambio está linea, así crea un rango para hacer el for.
E18=c(" Preschool"," 1st-4th"," 5th-6th"," 7th-8th"," 9th"," 10th" ," 11th"," 12th")
E912=c(" HS-grad"," Some-college"," Assoc-acdm"," Assoc-voc")
E1316=c(" Bachelors"," Masters" ," Prof-school"," Doctorate")
datosAdult <- mutate(datosAdult, EdLevel = '')
for (i in filas){ ## Modifico un poco este código, no quiero perder los valores originales por si fueran útiles en otro momento. Entiendo que se corresponden con niveles bajos, medios y altos de educación.
if (datosAdult$education[i] %in% E18==TRUE){
datosAdult$EdLevel[i]= "E18 - Low"
} else if(datosAdult$education[i] %in% E912==TRUE){
datosAdult$EdLevel[i]= "E912 - Medium"
} else if (datosAdult$education[i] %in% E1316==TRUE){
datosAdult$EdLevel[i]= "E1316 - High"
}
}
rm(filas ,E18, E912, E1316)
# Estudio de workclass: El 5,6% de los valores workclass son ? así que procedo a reemplazarlo
round(table(datosAdult$workclass)/nrow(datosAdult)*100,1)
# Creo un dataframe Data_DFcon las variables que necesito 'Workclass' y 'edlevel', creo una tabla y comienzo a filtrar para selecciónar el valor más frecuente, una vez los tengo creo el datagrame data_DFfullfill con la información necesaria para reemplazar.
listforvalues <-unique(datosAdult$EdLevel) ## Lista con los observaciones únicas de educación
## Creo un dataframe en el que excluyo las líneas con valor Workclass == '?', las lineas con las que no quiero trabajar
Data_DF <- select(datosAdult,workclass,EdLevel) %>%  filter(workclass!=' ?')
Data_DF <- data.frame(table(Data_DF)) ## Uso la función table para poder obtener los datos agregados.
Data_DFfullfill <- ''
for (x in listforvalues){ ## en estas lineas busco la freq más alta para cada tipo de educación y lo agrego a DataDffullfill
Filtered_DF <- filter(Data_DF, EdLevel==x)
Filtered_DF <- filter(Filtered_DF, Freq==max(Filtered_DF$Freq))
Data_DFfullfill <- rbind(Data_DFfullfill, Filtered_DF)}
Data_DFfullfill <- Data_DFfullfill[-c(1),] ## Borro la primera línea de data_dffullfill, ya que está en blanco, esto se debe a la forma en la que lo he creado.
head(Data_DFfullfill)
# procedo a reemplazar
Rx <- c(1:nrow(Data_DFfullfill))
for (x in Rx){
datosAdult <-  mutate(datosAdult , workclass= if_else(workclass==' ?'& EdLevel == as.character(Data_DFfullfill[x,2])
, as.character(Data_DFfullfill[x,1])
,workclass)
)
}
# Reviso que está bien
round(table(datosAdult$workclass)/nrow(datosAdult)*100,1)
# Borro los objetos de este modulo
rm(Data_DF, Data_DFfullfill,Filtered_DF,Rx,x,VartoFact,listforvalues)
# Estudio de workclass: El 5,6% de los valores workclass son ? así que procedo a reemplazarlo
round(table(datosAdult$workclass)/nrow(datosAdult)*100,1)
# Creo un dataframe Data_DFcon las variables que necesito 'Workclass' y 'edlevel', creo una tabla y comienzo a filtrar para selecciónar el valor más frecuente, una vez los tengo creo el datagrame data_DFfullfill con la información necesaria para reemplazar.
listforvalues <-unique(datosAdult$EdLevel) ## Lista con los observaciones únicas de educación
## Creo un dataframe en el que excluyo las líneas con valor Workclass == '?', las lineas con las que no quiero trabajar
Data_DF <- select(datosAdult,workclass,EdLevel) %>%  filter(workclass!=' ?')
Data_DF <- data.frame(table(Data_DF)) ## Uso la función table para poder obtener los datos agregados.
Data_DFfullfill <- ''
for (x in listforvalues){ ## en estas lineas busco la freq más alta para cada tipo de educación y lo agrego a DataDffullfill
Filtered_DF <- filter(Data_DF, EdLevel==x)
Filtered_DF <- filter(Filtered_DF, Freq==max(Filtered_DF$Freq))
Data_DFfullfill <- rbind(Data_DFfullfill, Filtered_DF)}
Data_DFfullfill <- Data_DFfullfill[-c(1),] ## Borro la primera línea de data_dffullfill, ya que está en blanco, esto se debe a la forma en la que lo he creado.
head(Data_DFfullfill)
# procedo a reemplazar
Rx <- c(1:nrow(Data_DFfullfill))
for (x in Rx){
datosAdult <-  mutate(datosAdult , workclass= if_else(workclass==' ?'& EdLevel == as.character(Data_DFfullfill[x,2])
, as.character(Data_DFfullfill[x,1])
,workclass)
)
}
# Reviso que está bien
round(table(datosAdult$workclass)/nrow(datosAdult)*100,1)
# Borro los objetos de este modulo
rm(Data_DF, Data_DFfullfill,Filtered_DF,Rx,x,VartoFact,listforvalues)
# Cargamos el juego de datos
datosAdult <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data',stringsAsFactors = FALSE, header = FALSE)
# Nombres de los atributos
names(datosAdult) <- c("age","workclass","fnlwgt","education","education-num","marital-status","occupation","relationship","race","sex","capital-gain","capital-loss","hour-per-week","native-country","income")
library(dplyr)
library(tidyverse)
filas= c(1:nrow(datosAdult)) ## Cambio está linea, así crea un rango para hacer el for.
E18=c(" Preschool"," 1st-4th"," 5th-6th"," 7th-8th"," 9th"," 10th" ," 11th"," 12th")
E912=c(" HS-grad"," Some-college"," Assoc-acdm"," Assoc-voc")
E1316=c(" Bachelors"," Masters" ," Prof-school"," Doctorate")
datosAdult <- mutate(datosAdult, EdLevel = '')
for (i in filas){ ## Modifico un poco este código, no quiero perder los valores originales por si fueran útiles en otro momento. Entiendo que se corresponden con niveles bajos, medios y altos de educación.
if (datosAdult$education[i] %in% E18==TRUE){
datosAdult$EdLevel[i]= "E18 - Low"
} else if(datosAdult$education[i] %in% E912==TRUE){
datosAdult$EdLevel[i]= "E912 - Medium"
} else if (datosAdult$education[i] %in% E1316==TRUE){
datosAdult$EdLevel[i]= "E1316 - High"
}
}
rm(filas ,E18, E912, E1316)
# Estudio de workclass: El 5,6% de los valores workclass son ? así que procedo a reemplazarlo
round(table(datosAdult$workclass)/nrow(datosAdult)*100,1)
listforvalues <-unique(datosAdult$EdLevel) ## Lista con los observaciones únicas de educación
Data_DF <- select(datosAdult,workclass,EdLevel) %>%  filter(workclass!=' ?')
Data_DF <- select(datosAdult,workclass,EdLevel) %>%  filter(workclass!=' ?')
Data_DF <- data.frame(table(Data_DF)) ## Uso la función table para poder obtener los datos agregados.
Data_DFfullfill <- ''
for (x in listforvalues){ ## en estas lineas busco la freq más alta para cada tipo de educación y lo agrego a DataDffullfill
Filtered_DF <- filter(Data_DF, EdLevel==x)
Filtered_DF <- filter(Filtered_DF, Freq==max(Filtered_DF$Freq))
Data_DFfullfill <- rbind(Data_DFfullfill, Filtered_DF)}
